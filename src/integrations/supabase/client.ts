// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Single source of truth: VITE env variables only

// Disallow localStorage and window-global overrides in production builds

// Remove async fetch-based fallbacks to ensure compatibility with older build targets

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string;

// Use only anon/public key for frontend auth
// Prefer anon key for Realtime stability; fall back to publishable if anon not set
const SUPABASE_ANON_KEY = ((import.meta as any).env?.VITE_SUPABASE_ANON_KEY || (import.meta as any).env?.VITE_SUPABASE_PUBLISHABLE_DEFAULT_KEY) as string;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  // Slightly lower event rate to reduce disconnects; rely on anon key above
  realtime: { params: { eventsPerSecond: 2 } }
});

// Expose globally for any legacy callers that expect window.supabase
try {
  if (typeof window !== 'undefined') {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (window as any).supabase = supabase;
  }
} catch {}

// Fail-fast with a clear error if env vars are not configured
const missingUrl = !import.meta.env.VITE_SUPABASE_URL;
const missingKey = !((import.meta as any).env?.VITE_SUPABASE_PUBLISHABLE_DEFAULT_KEY || import.meta.env.VITE_SUPABASE_ANON_KEY);
const usingPlaceholders = false;

if (missingUrl || missingKey || usingPlaceholders) {
  const message = [
    'Supabase environment variables are not configured.',
    'Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in .env.local',
    'See SUPABASE_MIGRATION_GUIDE.md (Step 3).'
  ].join(' ');
  // eslint-disable-next-line no-console
  console.warn(message, {
    VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? 'SET' : 'NOT SET',
    VITE_SUPABASE_PUBLISHABLE_DEFAULT_KEY: (import.meta as any).env?.VITE_SUPABASE_PUBLISHABLE_DEFAULT_KEY ? 'SET' : 'NOT SET',
    VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET',
  });
}

export const SUPABASE_READY = !(missingUrl || missingKey || usingPlaceholders);

if (SUPABASE_READY) {
  // eslint-disable-next-line no-console
  console.info('[Supabase] Environment detected:', {
    VITE_SUPABASE_URL: (import.meta.env.VITE_SUPABASE_URL || '').replace(/^(https:\/\/)([^.]+)(.*)$/,'$1***$3'),
    VITE_SUPABASE_ANON_KEY: 'SET',
  });
}